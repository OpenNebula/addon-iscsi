#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2013, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# clone fe:SOURCE host:remote_system_ds/disk.i size vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2

VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

 . $TMCOMMON

source ${DRIVER_PATH}/../../datastore/iscsi/iscsi.conf

#-------------------------------------------------------------------------------
# Set src, dst path and dir
#-------------------------------------------------------------------------------

TARGET=`arg_path $SRC`

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`


IQN=$SRC
NEW_IQN=$IQN-$VMID
#-------------------------------------------------------------------------------
# IQN and TARGETs
#-------------------------------------------------------------------------------
if [ "$VBD_TYPE" = "lvm" ]
then
    VG_NAME=`echo $TARGET|$AWK -F. '{print $(NF-1)}'`
    LV_NAME=`echo $TARGET|$AWK -F. '{print $(NF)}'`
    SOURCE_DEV="/dev/$VG_NAME/$LV_NAME"

    TARGET_LV_NAME=`echo $LV_NAME-$VMID`
    TARGET_DEV="/dev/${VG_NAME}/${TARGET_LV_NAME}"
    TARGET_HOST="${TARGET%.$VG_NAME.$LV_NAME}"

#-------------------------------------------------------------------------------
# Clone script
#-------------------------------------------------------------------------------

    CLONE_CMD=$(cat <<EOF
        set -e

        # get size
        SIZE=\$($SUDO $LVS --noheadings -o lv_size "$SOURCE_DEV")

        # create lv
        $SUDO $LVCREATE -L\${SIZE} ${VG_NAME} -n ${TARGET_LV_NAME}

        # clone lv with dd
        $SUDO $DD if=$SOURCE_DEV of=$TARGET_DEV bs=2M

        # new iscsi target
        $SUDO $(tgt_setup_lun "$NEW_IQN" "$TARGET_DEV")
        $SUDO $(tgt_admin_dump_config "$TARGET_CONF")
EOF
)
elif [ "$VBD_TYPE" = "zfs" ]
then
    _DATASET_NAME=`echo $TARGET|$AWK -F. '{print $(NF-1)}'`
    LV_NAME=`echo $TARGET|$AWK -F. '{print $(NF)}'`
    SOURCE_DEV="/dev/zvol/$DATASET_NAME/$LV_NAME"

    TARGET_LV_NAME=`echo $LV_NAME-$VMID`
    TARGET_DEV="/dev/zvol/${DATASET_NAME}/${TARGET_LV_NAME}"
    TARGET_HOST="${TARGET%.$_DATASET_NAME.$LV_NAME}"

#-------------------------------------------------------------------------------
# Clone script
#-------------------------------------------------------------------------------

        #SIZE=\$($SUDO /sbin/zfs list -H -p  -o used $DATASET_NAME/$LV_NAME | $AWK '{printf "%d", \$1/1024/1024}'  | $TR -d ' ')
        #$SUDO /sbin/zfs create -V \${SIZE}M ${DATASET_NAME}/${TARGET_LV_NAME}
    CLONE_CMD=$(cat <<EOF
        set -e

        # get size
        SIZE=\$($SUDO /sbin/zfs list -H -p  -o used $DATASET_NAME/$LV_NAME | $AWK '{printf "%d", \$1}'  | $TR -d ' ')
        # create lv
        #$SUDO /sbin/zfs create -V \${SIZE} ${DATASET_NAME}/${TARGET_LV_NAME}

        # clone lv with dd
        #$SUDO $DD if=$SOURCE_DEV of=$TARGET_DEV bs=2M
        $SUDO /sbin/zfs clone ${DATASET_NAME}/${LV_NAME}@snap ${DATASET_NAME}/${TARGET_LV_NAME}

        # new iscsi target
        $SUDO $(tgt_setup_lun "$NEW_IQN" "$TARGET_DEV")
        $SUDO $(tgt_admin_dump_config "$TARGET_CONF")
EOF
)
fi

ssh_exec_and_log "$TARGET_HOST" "$CLONE_CMD" \
        "Error cloning $DST_HOST:$TARGET_DEV"

LINK_CMD=$(cat <<EOF
    set -e

    # discover and login
    mkdir -p $DST_DIR
    $SUDO $(iscsiadm_discovery "$TARGET_HOST")
    $SUDO $(iscsiadm_login "$NEW_IQN" "$TARGET_HOST")

    # poll
    while [ ! -L /dev/disk/by-path/*$NEW_IQN-lun-1 ]; do
	   sleep 1
    done

    # link
    DISK_BY_PATH=\$(ls /dev/disk/by-path/*$NEW_IQN-lun-1)
    ln -s "\$DISK_BY_PATH" "$DST_PATH"
    $SUDO /bin/chown oneadmin:oneadmin "\$DISK_BY_PATH"
    DISK_DEVNAME=\$(readlink -f \$DISK_BY_PATH  | awk -F'/' '{ print \$NF }')
EOF
)

ssh_exec_and_log "$DST_HOST" "$LINK_CMD" \
        "Error linking $NEW_IQN in $DST_HOST"

exit 0
